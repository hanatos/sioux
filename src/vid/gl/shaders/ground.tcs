#version 450 core

layout (vertices = 3) out;

void main(void)
{
  if (gl_InvocationID == 0)
  {
    // determine three edge tessellation levels by distance in texture space.
    // if the distance is so small that we couldn't resolve the finest texture
    // level, we don't care.
    // also, if we're too far from camera (u_pos_ws) we don't care either
    vec3 a = gl_in[0].gl_Position.xyz;
    vec3 b = gl_in[1].gl_Position.xyz;
    vec3 c = gl_in[2].gl_Position.xyz;
    // this is with the 16x16 characters:
    // const float k_terrain_pixel_scale = 1.0f/(16.0*1024.0/(3.0*0.3048*2048.0));
    const float k_terrain_pixel_scale = 16.0f/(16.0*1024.0/(3.0*0.3048*2048.0));
    float e0 = length(b-c);
    float e1 = length(c-a);
    float e2 = length(a-b);
    float m0 = clamp(1.0f + 2*length(0.5f*(b+c)) / 40.0f, 1.0f, 320.0f);
    float m1 = clamp(1.0f + 2*length(0.5f*(a+c)) / 40.0f, 1.0f, 320.0f);
    float m2 = clamp(1.0f + 2*length(0.5f*(a+b)) / 40.0f, 1.0f, 320.0f);
    gl_TessLevelOuter[0] = clamp(e0 / (m0 * k_terrain_pixel_scale), 1, 8);
    gl_TessLevelOuter[1] = clamp(e1 / (m1 * k_terrain_pixel_scale), 1, 8);
    gl_TessLevelOuter[2] = clamp(e2 / (m2 * k_terrain_pixel_scale), 1, 8);
    gl_TessLevelInner[0] = max(
        gl_TessLevelOuter[0],
        max(gl_TessLevelOuter[1], gl_TessLevelOuter[2]));
  }
  gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}
